<?php
// $Id$

/*
 * Implementation of hook_menu().
 */
function user_expire_menu() {
  $items = array();

  $items['admin/settings/user_expire'] = array(
    'title' => 'User Expire Settings',
    'description' => 'add expiration date into accounts.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_expire_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'user_expire.admin.inc',
  );

  $items['user/%user_category/edit/user_expire'] = array(
    'title' => 'Expiration date',
    'page callback' => 'user_expire_user_settings',
    'page arguments' => array(1),
    'access arguments' => array('administer user expire'),
    'load arguments' => array('%map', '%index'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
    'file' => 'user_expire.pages.inc',
  );

  return $items;
}

/**
 * Implementation of hook_user().
 */
function user_expire_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'insert':
      _user_expire_insert_entry($account->uid, strtotime(variable_get('user_expire_default_date', '')));
      break;
    case 'categories':
      return array(
        array(
          'name' => 'user_expire',
          'title' => 'Expiration date',
          'weight' => 10,
        ),
      );
    case 'delete':
      _user_expire_delete_entry($account->uid);
      break;

    case 'update':
      //_user_expire_update_entry($account->uid);
      break;
  }
}

/**
 * Implementation of hook_perm()
 */
function user_expire_perm() {
  return array('administer user expire');
}

/**
 * Implementation of hook_cron().
 */
function user_expire_cron() {
  if ($query = db_query('SELECT uid FROM {user_expire} WHERE expire < %d', strtotime('now'))) {
    while ($entry = db_fetch_object($query)) {
      $uids[] = $entry->uid;
    }

    if ($uids != NULL) {
      _user_expire_expire_user($uids);
    }
  }
}

function _user_expire_insert_entry($uid, $expire) {
  $args[] = $uid;
  $args[] = $expire;

  if (strcmp($expire, '') != 0) {
    db_query('INSERT INTO {user_expire} (uid, expire) VALUES (%d, %d)', $args);
  }
}

function _user_expire_delete_entry($uid) {
  db_query('DELETE FROM {user_expire} WHERE uid = %d', $uid);
}

function _user_expire_update_entry($uid, $expire) {
  $args[] = $expire;
  $args[] = $uid;

  $result = db_query('SELECT uid, expire FROM {user_expire} WHERE uid = %d', $uid);

  if ($result == FALSE) {
    drupal_set_message(t('user %d not found.'), 'error');
  }
  elseif (db_result($result)) {
    db_query('UPDATE {user_expire} SET expire = %d WHERE uid = %d', $args);
  }
  else {
    _user_expire_insert_entry($uid, $expire);
  }
}

function _user_expire_expire_user($uids) {
  foreach ($uids as $uid) {
    _user_expire_block_user($uid);
  }
}

function _user_expire_block_user($uid) {
  db_query('UPDATE {users} SET status = 0 WHERE uid = %d', $uid);
}

function _user_expire_delete_user($uid) {
  db_query('DELETE FROM {users} WHERE uid = %d', $uid);
}

function _user_expire_get_expiration_date($uid) {
  $result = db_query('select expire FROM {user_expire} WHERE uid = %d', $uid);
  if ($result == FALSE) {
    return '';
  }
  else {
    $entry = db_fetch_object($result);
    if (strcmp($entry->expire, '') == 0) {
      return '';
    }
    else {
      return date('d-m-Y', $entry->expire);
    }
  }
}
